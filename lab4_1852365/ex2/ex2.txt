  In memory, all the variables, functions, and data structures are allocated into a special memory segment known as Data Segment. The data segment is mainly divided into four different parts which are specifically allocated to different types of data defined in our C program: data area, code area, heap area and heap area. 
  This essay will only focus on heap memory. As we know that C supports dynamic memory allocation. C provides the functions like malloc() and calloc() which are used to allocate the memory dynamically. Therefore, the heap area is used to store the data structures which are created by using dynamic memory allocation. The size of the heap area is variable and depends upon the free space in the memory. When we call malloc, it will return a pointer with the memory region pointed by this pointer a little bit bigger than the request memory. Because of the fact that the address of a block returned by malloc() in GNU systems is always a multiple of eight (or sixteen on 64-bit systems), in some cases we need a block whose address is a multiple of a higher power of two than that, we must use aligned_malloc(). For instance, when dealing with SIMD instructions, we need our data aligned on 16-byte boundaries, so we could use aligned_malloc() to guarantee that it work on any systems. 
  The heap is a region of our computer's memory that is not managed automatically for us, and is not as tightly managed by the CPU. It is a more free-floating region of memory (and is larger). To allocate memory on the heap, we must use malloc() or calloc(), which are built-in C functions. Once we have allocated memory on the heap, we are responsible for using free() to deallocate that memory once you don't need it any more. If we fail to do this, our program will have what is known as a memory leak. That is, memory on the heap will still be set aside (and won't be available to other processes). The end of the heap is marked by a pointer known as the "break". When the heap manager needs more memory, it can push the break further away using the system calls brk and sbrk. Thus this is the way to expand heapâ€™ size of a running process. We typically don't call brk ourselves explicitly, but if we malloc enough memory, brk will eventually be called for us. Our program may not call both malloc() and brk(). If we use malloc, it expects to have sole control over when brk and sbrk are called.
